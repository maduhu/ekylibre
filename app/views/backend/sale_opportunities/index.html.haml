- responsibles = Entity.users.where(id: SaleOpportunity.select(:responsible_id).compact.uniq).reorder(:last_name)
= kujaku do |k|
  - k.text
  - entities = Entity.where(id: SaleOpportunity.select(:provider_id).compact.uniq).reorder(:full_name)
  - k.helper do
    %label= SaleOpportunity.human_attribute_name(:responsible)
    = select_tag(:responsible_id, options_for_select([[]] + responsibles.collect{|u| [u.label, u.id]}, params[:responsible_id]))
  - k.helper do
    %label= SaleOpportunity.human_attribute_name(:provider)
    = select_tag(:provider_id, options_for_select([[]] + entities.collect{|u| [u.full_name, u.id]}, params[:provider_id]))
  - k.helper do
    %label= SaleOpportunity.human_attribute_name(:nature)
    = select_tag(:nature_id, options_for_select([[]] + AffairNature.all.collect{|u| [u.name, u.id]}, params[:nature_id]))

- main_toolbar do |t|
  = t.new params: { redirect: nil }

= janus do |j|
  - j.face :list do
    = main_list

  - j.face :chart do
    :ruby
      all_sale_opportunities = SaleOpportunity.all
      series = []
      unit = Nomen::Currency[all_sale_opportunities.first.currency]
      # states = all_sale_opportunities.pluck(:state).uniq.delete("won").delete("lost").sort!
      # responsibles = Entity.users.where(id: SaleOpportunity.select(:responsible_id).compact.uniq).reorder(:last_name)
      categories = ["prospecting", "qualification", "value_proposition", "price_quote", "negociation"]

      responsibles.each do |responsible|
        data = []
        h = all_sale_opportunities.where(responsible_id: responsible.id).reorder(:state).group(:state).sum(:pretax_amount)
        categories.each do |category|
          if h[category]
            data << h[category].to_s.to_f
          else
            data << 0
          end
        end
        series << {name: responsible.full_name, data: data}
      end

    - if series.any?
      = column_highcharts(series, y_axis: {title: {text: :pretax_amount.tl}, stack_labels: {enabled: true, format: "{total} #{unit.symbol}"}, labels: { format: "{value} #{unit.symbol}" }}, x_axis: { categories: categories.map(&:tl)}, legend: true, plot_options: { column: {stacking: 'normal'}})
    - else
      = no_data
  - j.face :map do
    :ruby
      data = SaleOpportunity.all.collect do |s|
        a = s.client.default_mail_address
        next unless a && a.mail_geolocation

        popup_content = []
        popup_content << {label: SaleOpportunity.human_attribute_name(:pretax_amount), value: s.pretax_amount}
        popup_content << {label: SaleOpportunity.human_attribute_name(:probability_percentage), value: s.probability_percentage}
        popup_content << {label: SaleOpportunity.human_attribute_name(:state_label), value: s.state_label}
        popup_content << {value: labels_info(s.labels)} if s.labels.any?
        popup_content << {value: lights(s.status)}
        popup_content << render('popup', opportunity: s)

        {
          name: s.client.full_name,
          shape: a.mail_geolocation,
          pretax_amount: s.pretax_amount.to_s.to_f,
          popup: {header: true, content: popup_content}
        }
      end
    = visualization(box: {height: "100%"}) do |v|
      - v.serie :main, data
      - v.bubbles :pretax_amount, :main
      - v.control :zoom
      - v.control :scale
      - v.control :fullscreen
      - v.control :layer_selector





